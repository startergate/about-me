{"version":3,"sources":["webpack:///./src/components/projects/simple.tsx","webpack:///./src/components/images/badge.tsx","webpack:///./src/enums/langs.ts","webpack:///./src/components/projects/projectLanguage.tsx","webpack:///./src/components/profiles/external.tsx","webpack:///./src/util/classToggler.ts","webpack:///./src/components/projects/filter.tsx","webpack:///./src/pages/projects.tsx","webpack:///./src/components/images/thumbnail.tsx","webpack:///./src/components/images/image.tsx","webpack:///./src/components/projects/detail.tsx","webpack:///./src/components/projects/overlay.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["overlayDispatcher","event","body","document","querySelector","overlays","target","getElementById","currentTarget","id","classList","add","ProjectCard","data","className","onClick","src","imgSrc","name","description","tag","tags","Badge","props","useStaticQuery","match","React","allFile","edges","find","node","relativePath","fluid","childImageSharp","viewBox","version","width","height","aria-hidden","fillRule","d","LanguageColor","LanguageBadge","style","backgroundColor","Icon","href","link","title","type","image","background","external_id","Small","color","toggle","contains","remove","Filter","filterHandler","allProjectsJson","distinct","updateSelected","selected","querySelectorAll","map","element","textContent","innerHTML","join","select","key","parentElement","children","forEach","item","selector","Projects","projects","nodes","badgeData","linksJson","console","log","ids","length","filter","x","includes","value","Thumbnail","Image","ProjectDetail","contents","text","Overlay","project","_objectWithoutPropertiesLoose","source","excluded","i","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-projects-tsx-06f9b4d73ca78f6cd7b3.js","sourcesContent":["import * as React from 'react';\n\nimport Badge from '../images/badge';\nimport LanguageBadge from './projectLanguage';\n\nimport './simple.css';\n\nconst overlayDispatcher = (event: React.MouseEvent) => {\n  const body = document.querySelector('body');\n  const overlays = document.querySelector('.project-overlay');\n  const target = document.getElementById(`overlay-${event.currentTarget.id}`);\n  body.classList.add('disabled');\n  overlays.classList.add('active');\n  target.classList.add('active');\n};\n\nconst ProjectCard = ({ data }) => {\n  return (\n    <div className=\"project-card\" id={data.id} onClick={overlayDispatcher}>\n      <div className=\"project-card-name\">\n        <Badge className=\"project-card-badge\" src={data.imgSrc} />\n        {data.name}\n      </div>\n      <div className=\"project-card-description\">{data.description}</div>\n      <div className=\"project-card-tags\">\n        <LanguageBadge tag={data.tags[0]} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst Badge = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 32) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  if (match) return <Img fluid={match.node.childImageSharp.fluid} {...props} />;\n  else\n    return (\n      <svg\n        className=\"project-card-badge\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        width=\"16\"\n        height=\"16\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z\"\n        />\n      </svg>\n    );\n};\n\nexport default Badge;\n","enum LanguageColor {\n  Python = '#3572A5',\n  TypeScript = '#2B7489',\n  JavaScript = '#F1E05A',\n}\n\nexport default LanguageColor;\n","import * as React from 'react';\n\nimport LanguageColor from '../../enums/langs';\n\nimport './projectLanguage.css';\n\nconst LanguageBadge = ({ tag }) => {\n  return (\n    <span className=\"project-language\">\n      <span\n        className=\"project-language-badge\"\n        style={{\n          backgroundColor: LanguageColor[tag] || '#ccc',\n        }}\n      />\n      {tag}\n    </span>\n  );\n};\n\nexport default LanguageBadge;\n","import * as React from 'react';\nimport Badge from '../images/badge';\nimport Thumbnail from '../images/thumbnail';\n\nimport './badge.css';\nimport './external.css';\n\nconst Icon = ({ data }) => {\n  return (\n    <a\n      className=\"badge-external noLint\"\n      href={data.link}\n      title={data.type}\n      target=\"_blank\"\n    >\n      <span\n        className=\"badge badge-external-icon\"\n        style={{\n          backgroundColor: data.image.background || '#FFFFFF',\n        }}\n      >\n        <Thumbnail\n          className=\"badge-image badge-external-icon-image\"\n          src={data.image.src}\n        />\n      </span>\n      <span className=\"badge-external-text\">\n        <h6>\n          <span className=\"lint\">{data.type}</span>\n        </h6>\n        <span className=\"lint\">{data.external_id}</span>\n      </span>\n    </a>\n  );\n};\n\nconst Small = ({ data }) => (\n  <a\n    className=\"badge badge-external-small noLintAbsolute\"\n    style={{\n      backgroundColor: data.image.background || '#FFFFFF',\n    }}\n    href={data.link}\n    title={data.type}\n    target=\"_blank\"\n  >\n    <Badge className=\"badge-external-small-image\" src={data.image.src} />\n    <span\n      className=\"badge-external-small-id\"\n      style={{\n        color: data.image.background ? '#FFFFFF' : '#000000',\n      }}\n    >\n      {data.external_id}\n    </span>\n  </a>\n);\n\nexport { Small, Icon };\n","const toggle = (target, className) => {\n  target.classList.contains(className)\n    ? target.classList.remove(className)\n    : target.classList.add(className);\n};\n\nexport default toggle;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport toggle from '../../util/classToggler';\n\nimport './filter.css';\n\nconst Filter = ({ filterHandler }) => {\n  const data = useStaticQuery(graphql`\n    query getProjectTags {\n      allProjectsJson {\n        distinct(field: tags)\n      }\n    }\n  `).allProjectsJson.distinct;\n\n  const updateSelected = () => {\n    let selected: any = document.querySelectorAll(\n      '.project-filter-choice-activated'\n    );\n    selected = [...selected].map((element) => element.textContent);\n    document.querySelector('.project-filter-display').innerHTML =\n      selected.join(', ') || '사용 기술';\n    filterHandler?.(selected);\n  };\n\n  const reset = (event) => {\n    [\n      // @ts-ignore\n      ...event.currentTarget.parentElement.children,\n    ].forEach((children) =>\n      children.classList.remove('project-filter-choice-activated')\n    );\n    updateSelected();\n  };\n\n  const select = (event) => {\n    toggle(event.currentTarget, 'project-filter-choice-activated');\n    updateSelected();\n  };\n\n  return (\n    <div className=\"project-filter\">\n      <ul className=\"project-filter-selector hidden\">\n        <li key=\"all\" onClick={reset} className=\"project-filter-choice\">\n          필터 초기화\n        </li>\n        {data.map((item) => {\n          return (\n            <li key={item} onClick={select} className=\"project-filter-choice\">\n              {item}\n            </li>\n          );\n        })}\n      </ul>\n      <span\n        onClick={() => {\n          const selector = document.querySelector('.project-filter-selector');\n          toggle(selector, 'hidden');\n        }}\n        className=\"project-filter-display\"\n        title=\"눌러서 필터 변경\"\n      >\n        사용 기술\n      </span>\n    </div>\n  );\n};\n\nexport default Filter;\n","import * as React from 'react';\nimport { useStaticQuery, graphql, PageProps, Link } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Project from '../components/projects/simple';\n\nimport './projects.css';\nimport Filter from '../components/projects/filter';\nimport * as External from '../components/profiles/external';\nimport Overlay from '../components/projects/overlay';\n\nconst Projects = (props: PageProps) => {\n  const data = useStaticQuery(graphql`\n    query getProjectData {\n      allProjectsJson {\n        nodes {\n          id\n          name\n          description\n          startedAt\n          finishedAt\n          tags\n          links\n          imgSrc\n          contents {\n            title\n            text\n          }\n        }\n      }\n      linksJson(type: { eq: \"GitHub\" }) {\n        id\n        type\n        external_id\n        link\n        image {\n          background\n          src\n        }\n      }\n    }\n  `);\n\n  const projects = data.allProjectsJson.nodes;\n  const badgeData = data.linksJson;\n  console.log(badgeData);\n\n  const handler = (selected) => {\n    let ids = (selected.length > 0\n      ? projects.filter(\n          (x) => x.tags.filter((tag) => selected.includes(tag)).length\n        )\n      : projects\n    ).map((x) => x.id);\n    let elements = document.querySelectorAll('.project-card');\n    elements.forEach((element) => {\n      element.classList.remove('hidden');\n      if (!ids.includes(element.id)) {\n        element.classList.add('hidden');\n      }\n    });\n  };\n\n  return (\n    <Layout {...props}>\n      <SEO title=\"Projects\" />\n      <section className=\"subpage\">\n        <h1>\n          <span>Projects</span>\n        </h1>\n        <External.Small data={badgeData} />\n        <Filter filterHandler={handler} />\n        <div className=\"list project-list\">\n          {projects.map((value) => (\n            <Project data={value} />\n          ))}\n        </div>\n      </section>\n      <Overlay data={projects} />\n    </Layout>\n  );\n};\n\nexport default Projects;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst Thumbnail = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 128) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  return <Img fluid={match.node.childImageSharp.fluid} {...props} />;\n};\n\nexport default Thumbnail;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst Image = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 512) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  return <Img fluid={match.node.childImageSharp.fluid} {...props} />;\n};\n\nexport default Image;\n","import * as React from 'react';\n\nimport Image from '../images/image';\nimport LanguageBadge from './projectLanguage';\n\nimport './overlay.css';\nimport './detail.css';\n\nconst ProjectDetail = ({ data }) => (\n  <div className=\"overlay-item project-detail\" id={'overlay-' + data.id}>\n    <div className=\"project-detail-title\">\n      <Image className=\"project-detail-icon\" src={data.imgSrc} />\n      <h2 className=\"project-detail-name\">{data.name}</h2>\n      <div className=\"project-card-description\">{data.description}</div>\n      <div className=\"project-card-tags\">\n        {data.tags.map((value) => (\n          <LanguageBadge tag={value} />\n        ))}\n      </div>\n    </div>\n    {data.contents ? (\n      <div className=\"project-detail-content\">\n        {data.contents?.map(({ title, text }) => (\n          <div className=\"project-detail-content-item\">\n            <h5>{title}</h5>\n            {text}\n          </div>\n        ))}\n      </div>\n    ) : null}\n  </div>\n);\n\nexport default ProjectDetail;\n","import * as React from 'react';\nimport ProjectDetail from './detail';\n\nimport './overlay.css';\n\nconst Overlay = ({ data }) => (\n  <div\n    className=\"project-overlay\"\n    onClick={(event) => {\n      event.currentTarget.classList.remove('active');\n      document.querySelector('body').classList.remove('disabled');\n      document.querySelectorAll('.overlay-item').forEach((element) => {\n        element.classList.remove('active');\n      });\n    }}\n  >\n    {data.map((project) => (\n      <ProjectDetail data={project} />\n    ))}\n  </div>\n);\n\nexport default Overlay;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}
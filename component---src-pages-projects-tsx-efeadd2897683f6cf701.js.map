{"version":3,"sources":["webpack:///./src/components/projects/simple.tsx","webpack:///./src/components/images/badge.tsx","webpack:///./src/components/projects/projectLanguage.tsx","webpack:///./src/components/profiles/external.tsx","webpack:///./src/util/classToggler.ts","webpack:///./src/components/projects/filter.tsx","webpack:///./src/pages/projects.tsx","webpack:///./src/components/images/thumbnail.tsx","webpack:///./src/components/images/image.tsx","webpack:///./src/components/images/fullImage.tsx","webpack:///./src/util/getKoreanDateString.ts","webpack:///./src/components/projects/detail.tsx","webpack:///./src/components/projects/overlay.tsx","webpack:///./src/enums/langs.ts","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["overlayDispatcher","event","body","document","querySelector","overlays","target","getElementById","currentTarget","id","classList","add","ProjectCard","data","className","onClick","src","imgSrc","name","description","tag","tags","type","join","Badge","props","useStaticQuery","match","React","allFile","edges","find","node","relativePath","fluid","childImageSharp","viewBox","version","width","height","aria-hidden","fillRule","d","LanguageBadge","style","backgroundColor","LanguageColor","Icon","href","link","title","image","background","external_id","Small","color","toggle","contains","remove","Filter","filterHandler","defaultTitle","updateSelected","selected","querySelectorAll","map","element","textContent","innerHTML","select","selector","key","forEach","item","Projects","projects","allProjectsJson","nodes","badgeData","linksJson","types","distinct","selectedTypes","selectedTags","handler","temp","length","filter","x","includes","value","Thumbnail","Image","FullImage","getKoreanDateString","date","getFullYear","getMonth","getDate","ProjectDetail","finishedAt","status","transform","Date","startedAt","getTime","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","x1","y1","x2","y2","strokeWidth","contents","text","Overlay","project","_objectWithoutPropertiesLoose","source","excluded","i","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-projects-tsx-efeadd2897683f6cf701.js","sourcesContent":["import * as React from 'react';\n\nimport Badge from '../images/badge';\nimport LanguageBadge from './projectLanguage';\n\nimport './simple.css';\n\nconst overlayDispatcher = (event: React.MouseEvent) => {\n  const body = document.querySelector('body');\n  const overlays = document.querySelector('.project-overlay');\n  const target = document.getElementById(`overlay-${event.currentTarget.id}`);\n  body.classList.add('disabled');\n  overlays.classList.add('active');\n  target.classList.add('active');\n};\n\nconst ProjectCard = ({ data }) => {\n  return (\n    <div className=\"project-card\" id={data.id} onClick={overlayDispatcher}>\n      <div className=\"project-card-name\">\n        <Badge className=\"project-card-badge\" src={data.imgSrc} />\n        {data.name}\n      </div>\n      <div className=\"project-card-description\">{data.description}</div>\n      <div className=\"project-card-tags\">\n        <LanguageBadge tag={data.tags[0]} />\n        <span className=\"project-card-type\">{data.type.join(', ')}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst Badge = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 32) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  if (match) return <Img fluid={match.node.childImageSharp.fluid} {...props} />;\n  else\n    return (\n      <svg\n        className=\"project-card-badge\"\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        width=\"16\"\n        height=\"16\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z\"\n        />\n      </svg>\n    );\n};\n\nexport default Badge;\n","import * as React from 'react';\n\nimport LanguageColor from '../../enums/langs';\n\nimport './projectLanguage.css';\n\nconst LanguageBadge = ({ tag }) => {\n  return (\n    <span className=\"project-language\">\n      <span\n        className=\"project-language-badge\"\n        style={{\n          backgroundColor: LanguageColor[tag] || '#ccc',\n        }}\n      />\n      {tag}\n    </span>\n  );\n};\n\nexport default LanguageBadge;\n","import * as React from 'react';\nimport Badge from '../images/badge';\nimport Thumbnail from '../images/thumbnail';\n\nimport './badge.css';\nimport './external.css';\n\nconst Icon = ({ data }) => {\n  return (\n    <a\n      className=\"badge-external noLint\"\n      href={data.link}\n      title={data.type}\n      target=\"_blank\"\n    >\n      <span\n        className=\"badge badge-external-icon\"\n        style={{\n          backgroundColor: data.image.background || '#FFFFFF',\n        }}\n      >\n        <Thumbnail\n          className=\"badge-image badge-external-icon-image\"\n          src={data.image.src}\n        />\n      </span>\n      <span className=\"badge-external-text\">\n        <h6>\n          <span className=\"lint\">{data.type}</span>\n        </h6>\n        <span className=\"lint\">{data.external_id}</span>\n      </span>\n    </a>\n  );\n};\n\nconst Small = ({ data }) => (\n  <a\n    className=\"badge badge-external-small noLintAbsolute\"\n    style={{\n      backgroundColor: data.image.background || '#FFFFFF',\n    }}\n    href={data.link}\n    title={data.type}\n    target=\"_blank\"\n  >\n    <Badge className=\"badge-external-small-image\" src={data.image.src} />\n    <span\n      className=\"badge-external-small-id\"\n      style={{\n        color: data.image.background ? '#FFFFFF' : '#000000',\n      }}\n    >\n      {data.external_id}\n    </span>\n  </a>\n);\n\nexport { Small, Icon };\n","const toggle = (target, className) => {\n  target.classList.contains(className)\n    ? target.classList.remove(className)\n    : target.classList.add(className);\n};\n\nexport default toggle;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport toggle from '../../util/classToggler';\n\nimport './filter.css';\n\nconst Filter = ({ filterHandler, data, defaultTitle, ...props }) => {\n  const updateSelected = () => {\n    let selected: any = document.querySelectorAll(\n      `#${props.id} .project-filter-choice-activated`\n    );\n    selected = [...selected].map((element) => element.textContent);\n    document.querySelector(`#${props.id} .project-filter-display`).innerHTML =\n      selected.join(', ') || defaultTitle;\n    filterHandler?.(selected);\n  };\n\n  const reset = () => {\n    document\n      .querySelectorAll(`#${props.id} .project-filter-choice-activated`)\n      .forEach((element) => {\n        element.classList.remove('project-filter-choice-activated');\n      });\n    updateSelected();\n  };\n\n  const select = (event) => {\n    toggle(event.currentTarget, 'project-filter-choice-activated');\n    updateSelected();\n  };\n\n  return (\n    <div className=\"project-filter\" {...props}>\n      <p\n        onClick={() => {\n          const selector = document.querySelector(\n            `#${props.id} .project-filter-selector`\n          );\n          toggle(selector, 'hidden');\n        }}\n        className=\"project-filter-display\"\n        title=\"눌러서 필터 변경\"\n      >\n        {defaultTitle}\n      </p>\n      <ul className=\"project-filter-selector hidden\">\n        <li\n          key={`${props.id}-all`}\n          onClick={reset}\n          className=\"project-filter-choice\"\n        >\n          필터 초기화\n        </li>\n        <ul className=\"project-filter-choice-list\">\n          {data.map((item) => {\n            return (\n              <li key={item} onClick={select} className=\"project-filter-choice\">\n                {item}\n              </li>\n            );\n          })}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n\nexport default Filter;\n","import * as React from 'react';\nimport { useStaticQuery, graphql, PageProps, Link } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Project from '../components/projects/simple';\n\nimport './projects.css';\nimport Filter from '../components/projects/filter';\nimport * as External from '../components/profiles/external';\nimport Overlay from '../components/projects/overlay';\n\nconst Projects = (props: PageProps) => {\n  const data = useStaticQuery(graphql`\n    query getProjectData {\n      allProjectsJson(\n        sort: { fields: [isHighlighted, orderLevel, name], order: [DESC, ASC] }\n      ) {\n        nodes {\n          id\n          name\n          description\n          startedAt\n          finishedAt\n          status\n          type\n          tags\n          links\n          imgSrc\n          contents {\n            title\n            text\n          }\n        }\n      }\n      tags: allProjectsJson {\n        distinct(field: tags)\n      }\n      type: allProjectsJson {\n        distinct(field: type)\n      }\n      linksJson(type: { eq: \"GitHub\" }) {\n        id\n        type\n        external_id\n        link\n        image {\n          background\n          src\n        }\n      }\n    }\n  `);\n\n  const projects = data.allProjectsJson.nodes;\n  const badgeData = data.linksJson;\n  const types = data.type.distinct;\n  const tags = data.tags.distinct;\n\n  let selectedTypes = [];\n  let selectedTags = [];\n\n  const handler = () => {\n    let temp =\n      selectedTags.length > 0\n        ? projects.filter(\n            (x) => x.tags.filter((tag) => selectedTags.includes(tag)).length\n          )\n        : projects;\n    temp = temp = (selectedTypes.length > 0\n      ? temp.filter(\n          (x) => x.type.filter((type) => selectedTypes.includes(type)).length\n        )\n      : temp\n    ).map((x) => x.id);\n    let elements = document.querySelectorAll('.project-card');\n    elements.forEach((element) => {\n      element.classList.remove('hidden');\n      if (!temp.includes(element.id)) {\n        element.classList.add('hidden');\n      }\n    });\n  };\n\n  const tagHandler = (selected) => {\n    selectedTags = selected;\n    handler();\n  };\n\n  const typeHandler = (selected) => {\n    selectedTypes = selected;\n    handler();\n  };\n\n  return (\n    <Layout {...props}>\n      <SEO title=\"Projects\" />\n      <section className=\"subpage\">\n        <div className=\"page-title\">\n          <h1>\n            <span>Projects</span>\n          </h1>\n          <External.Small data={badgeData} />\n        </div>\n        <div className={'project-filters'}>\n          <Filter\n            filterHandler={tagHandler}\n            data={tags}\n            defaultTitle={'사용 기술'}\n            id={'project-filter-tags'}\n          />\n          <Filter\n            filterHandler={typeHandler}\n            data={types}\n            defaultTitle={'프로젝트 유형'}\n            id={'project-filter-types'}\n          />\n        </div>\n        <div className=\"list project-list\">\n          {projects.map((value) => (\n            <Project data={value} />\n          ))}\n        </div>\n      </section>\n      <Overlay data={projects} />\n    </Layout>\n  );\n};\n\nexport default Projects;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst Thumbnail = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 128) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  return <Img fluid={match.node.childImageSharp.fluid} {...props} />;\n};\n\nexport default Thumbnail;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst Image = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid(maxWidth: 512) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  return match ? (\n    <Img fluid={match.node.childImageSharp.fluid} {...props} />\n  ) : null;\n};\n\nexport default Image;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport Img from 'gatsby-image';\n\nconst FullImage = ({ src, ...props }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { internal: { mediaType: { regex: \"images/\" } } }) {\n        edges {\n          node {\n            relativePath\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const match = React.useMemo(\n    () => data.allFile.edges.find(({ node }) => src === node.relativePath),\n    [data, src]\n  );\n\n  return match ? (\n    <Img fluid={match.node.childImageSharp.fluid} {...props} />\n  ) : null;\n};\n\nexport default FullImage;\n","const getKoreanDateString = (date: Date): string => {\n  return `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일`;\n};\n\nexport default getKoreanDateString;\n","import * as React from 'react';\n\nimport Image from '../images/image';\nimport FullImage from '../images/fullImage';\nimport LanguageBadge from './projectLanguage';\n\nimport './overlay.css';\nimport './detail.css';\nimport LanguageColor from '../../enums/langs';\nimport getKoreanDateString from '../../util/getKoreanDateString';\n\nconst ProjectDetail = ({ data }) => (\n  <div className=\"overlay-item project-detail\" id={'overlay-' + data.id}>\n    <div className=\"project-detail-title\">\n      <Image className=\"project-detail-icon\" src={data.imgSrc} />\n      <h2 className=\"project-detail-name\">{data.name}</h2>\n      <div className=\"project-card-description\">{data.description}</div>\n      <div className=\"project-card-tags\">\n        {data.tags.map((value) => (\n          <LanguageBadge tag={value} />\n        ))}\n      </div>\n      <div className={'project-detail-time'}>\n        <div className={'project-detail-progression'}>\n          <div className={'progress-bar'}>\n            <div\n              className={'progress'}\n              style={{\n                backgroundColor: LanguageColor[data.tags[0]],\n                width: data.finishedAt\n                  ? `100%`\n                  : data.status === `Planning`\n                  ? '0%'\n                  : '50%',\n              }}\n            >\n              <svg\n                width={'24px'}\n                className={'progress-bar-icon'}\n                viewBox={'0 0 31.9 28.000643'}\n              >\n                <g transform={'translate(-4.8,-5.9)'}>\n                  <path d=\"m33.5 22.5c-1.9 0.1-6.7-0.1-6.7-0.1s-8.2 11.6-9.5 11.5c-1.2-0.1-2.6-0.4-2.6-0.4s6-11.4 4.5-11.3-8.1-0.2-8.1-0.2-3.7 4.6-4.1 4.5c-0.4 0-2.2-0.2-2.2-0.2s2.1-5.2 2.1-6.4v-0.1c0-1.2-2.1-6.4-2.1-6.4s1.7-0.2 2.2-0.2c0.4 0 4.2 4.5 4.2 4.5s6.6-0.3 8.1-0.2-4.5-11.3-4.5-11.3 1.2-0.2 2.5-0.3c1.3 0.1 9.6 11.7 9.6 11.7s4.8-0.1 6.7-0.1c1.9 0.1 3.1 2.5 3.1 2.5-0.1 0.2-1.3 2.5-3.2 2.5z\" />\n                </g>\n              </svg>\n            </div>\n          </div>\n        </div>\n        <span className={`project-detail-time-start`}>\n          {getKoreanDateString(new Date(data.startedAt))}\n        </span>\n        <span className={`project-detail-time-elapsed`}>\n          {data.finishedAt\n            ? `${\n                (new Date(data.finishedAt).getTime() -\n                  new Date(data.startedAt).getTime()) /\n                86400000\n              }일`\n            : data.status === 'Planning'\n            ? '계획 중'\n            : '개발 중'}\n        </span>\n        <span className={`project-detail-time-end`}>\n          {data.finishedAt\n            ? getKoreanDateString(new Date(data.finishedAt))\n            : ''}\n        </span>\n      </div>\n      <span\n        className={'project-detail-exit'}\n        onClick={() => {\n          const overlay = document.querySelector('.project-overlay');\n          overlay.dispatchEvent(\n            new MouseEvent('click', {\n              view: window,\n              bubbles: true,\n              cancelable: true,\n            })\n          );\n        }}\n      >\n        <svg viewBox=\"0 0 12 12\" version=\"1.1\">\n          <line x1=\"1\" y1=\"11\" x2=\"11\" y2=\"1\" strokeWidth=\"1\" />\n          <line x1=\"1\" y1=\"1\" x2=\"11\" y2=\"11\" strokeWidth=\"1\" />\n        </svg>\n      </span>\n    </div>\n    {data.contents ? (\n      <div className=\"project-detail-content\">\n        {data.contents?.map(({ title, image, text }) => (\n          <div className=\"project-detail-content-item\">\n            <h5>{title}</h5>\n            <FullImage src={image} />\n            {text}\n          </div>\n        ))}\n      </div>\n    ) : null}\n  </div>\n);\n\nexport default ProjectDetail;\n","import * as React from 'react';\nimport ProjectDetail from './detail';\n\nimport './overlay.css';\n\nconst Overlay = ({ data }) => {\n  /* document.addEventListener('keydown', (event) => {\n    if (event.keyCode == 27 || event.which == 27) {\n      const overlay = document.querySelector('.project-overlay');\n      overlay.dispatchEvent(new MouseEvent('click', {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      }))\n    }\n  });*/\n\n  return (\n    <div\n      className=\"project-overlay\"\n      onClick={(event) => {\n        if (event.target !== event.currentTarget) return;\n        event.currentTarget.classList.remove('active');\n        document.querySelector('body').classList.remove('disabled');\n        document.querySelectorAll('.overlay-item').forEach((element) => {\n          element.classList.remove('active');\n        });\n      }}\n    >\n      {data.map((project) => (\n        <ProjectDetail data={project} />\n      ))}\n    </div>\n  );\n};\n\nexport default Overlay;\n","enum LanguageColor {\n  Python = '#3572A5',\n  TypeScript = '#2B7489',\n  JavaScript = '#F1E05A',\n  'Unreal Engine' = 'black',\n  Unity = 'black',\n  HTML = '#e34c26',\n  'C++' = '#f34b7d',\n  'C#' = '#178600',\n  PHP = '#4F5D95',\n  Java = '#b07219',\n  'Node.js' = '#3C873A',\n  Django = '#092e20',\n  MySQL = '#00758F',\n  MariaDB = '#002d3b',\n  MongoDB = '#589636',\n  Qt = '#41CD52',\n  Electron = '#89deee',\n  Tensorflow = '#FFA800',\n  'Jupyter Notebook' = '#f8702c',\n  Docker = '#0db7ed',\n  GraphQL = '#e12b9a',\n  Steamworks = '#66c0f4',\n  Discord = '#7289DA',\n  'Google Maps API' = '#4285F4',\n  'Google Cloud Platform' = '#4285F4',\n  'AWS EC2' = '#FF9900',\n  'AWS S3' = '#FF9900',\n}\n\nexport default LanguageColor;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}